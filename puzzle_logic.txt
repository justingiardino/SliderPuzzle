finish maze vertex and dijkstra logic, then apply to slide puzzle (brute force move all pieces)

Notes from ideas during HPE
recursion function should have last move as the input
Check to make sure that move you are trying to do isn't the last move - maybe remove that move the dictionary since every piece has it
Try all available moves until there are none left, when there are none left undo last move and return a level in recursion
When you find exit, add E to the current vertex position and then go back a level in recursion so you can check for other directions
Other than that, should be similar to the maze solver



idea: keep track of bad moves(at least 15) that don't help open up a valid move, when that number is reached move pieces back until you get to bad moves equal 0 and then change piece search direction

need: when trying to move make sure piece isn't hitting boundary, if piece is at boundary and it is still blocking x piece, change direction

game over loop:
  if x is in game over location:
    game over True
  elif x can move right(closer to exit):
    x move right
    update start positions
  else:
    find what is blocking x to the right
    call recursion using current piece, blocking piece, and right

recursion function called move_block with input of current piece, blocking piece, direction, and coordinates dictionary:

  get coordinates of location you need opened(space to the right) in dictionary - (Maybe create a function)
  if blocking piece is vertical
    directions = up and down
  else ( blocking piece is horizontal)
    directions = left and Right
  try_direction = directions.pop - get one of the directions, later check to see if you have already tried both directions. If you have, and can't move any more then the piece is not helpful and needs to be reverted to previous step
  while blocking piece starting positions are not equal coordinates dictionary:
    #will need to clean up this logic a bit more, don't have direction variable any more, maybe check up and then down if up fails, or check right and then left if right fails


    if blocking piece can move in try_direction
      move blocking piece in try_direction
      update start positions
      add move to move list using append like this move list.append({'piece':'c', 'direction':'Down'})
      bad moves = 0

    elif bad moves is equal to 15 (maybe 20, don't want to go forever):
      revert moves #need to create this function
      decrement bad move after reverting move
      (will probably need to keep track of if I want to move back or not), keep going back if after you go back there is another direction available


    else:
      calculate new blocking piece, check if wall, if wall set bad moves equal to 15 to start reverting
      calculate new blocking directions, may be list of 1 or 2 objects, use pop
      bad moves += 1
      call recursion using blocking piece, new blocking piece, and new blocking direction[0]
      (will return here and check other direction if it exists)
      check other direction if it exists using length of new blocking direction
        if other direction does exist, reset direction check variable

revert moves

get open coordinates function with input of current piece and blocking piece
  if blocking piece is vertical
    if blocking piece length is 3

  else: - piece is horizontal



Random idea
Keep track of current move dict and alternate direction
When you've reached a bad recursion count(too many bad moves) exit out of current recursion call
Then look through current move dict for last x move right, this will be where the last recursion loop started,
revert back to there and start moving forward again
Then look for last piece that has an alternate direction, want to try and move that piece that direction





#keep track of recursion call count, when I get back to 1,

  !!NEW logic
recursion call with current piece that is blocked, the blocking piece, and the direction you want to move
  while x not in game over position
    if piece can move in the direction you want
      move that direction
      return to previous recursion level
    else piece is blocked
      set move found equal to false
      check if blocking piece is horizontal or vertical
      if vertical
        #Up
        if moving the piece up will help but it is blocked
          mark move found = True
          call recursion current piece, new blocking piece and new blocking direction
        elif x is in game over location
          set game over true to end all while loops
        #Down
        if moving the piece down will help but it is blocked
          mark move found = True
          call recursion current piece, new blocking piece and new blocking direction
        elif x is in game over location
          set game over true to end all while loops
      else horizontal
      #Left
      if moving the piece left will help but it is blocked
        mark move found = True
        call recursion current piece, new blocking piece and new blocking direction
      elif x is in game over location
        set game over true to end all while loops
      #Down
      if moving the piece right will help but it is blocked
        mark move found = True
        call recursion current piece, new blocking piece and new blocking direction
      elif x is in game over location
        set game over true to end all while loops
    after all checks, if move not found
      return to previous recursion call to check for another direction
